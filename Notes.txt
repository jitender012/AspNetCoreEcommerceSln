---Migration Commands---

-Remove table:

1. Remove this line
public class ApplicationDbContext : DbContext
{
    public DbSet<Product> Products { get; set; }
    // Remove this line if you want to delete the Products table:
    // public DbSet<OldTable> OldTables { get; set; }
}

2. Run the following command in the Package Manager Console:
Add-Migration RemoveOldTable

3. Check the Generated Migration File
protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.DropTable(
        name: "OldTable");
}

4. Apply the Migration
Run the following command to update the database:
Update-Database

---Rollback table
If you want to bring back the table, you can rollback the migration:

Update-Database <PreviousMigrationName>


 Create Repository Interfaces
 Implement Repository Interfaces


Use LINQ Select() for simple, straightforward mappings.
Use explicit mapping methods for complex mappings, reusability, and better maintainability.


order of css and js files:
bootstrap.css
site.css
admin.css
fontawesome.min.css
jquery-3.4.1.js
modernizr.js
bsicons.min.css
datatables.bootstrap5.min.css
datatables.min.js
datatables.bootstrap5.js
bootstrap.min.js
all.min.js

What i did when making changes in Entities was not applying using migration?
got errors like:
Add-Migration Creating Whole Database Script
can not modify IDENTITY property error.
Sln: 
1. Created migration named "newMigration", got large script that is for creating all tables(Not working).
2. Made changes in entities that wanted.
3. Created another migration "AlteredCategory".
4. Deleted all old migration files except "AlteredCategory" .
5. Updated database using "AlteredCategory" migration.




Controller basic methods:

[Authorize] // Requires authentication for all actions
public class ProductsController : Controller
{
    private readonly IProductService _productService;
    private readonly IMapper _mapper;

    public ProductsController(IProductService productService, IMapper mapper)
    {
        _productService = productService;
        _mapper = mapper;
    }

    // GET: Products
    public async Task<IActionResult> Index()
    {
        var products = await _productService.GetAllAsync();
        return View(products);
    }

    // GET: Products/Details/5
    public async Task<IActionResult> Details(int id)
    {
        if (id <= 0)
        {
            return BadRequest("Invalid product ID.");
        }

        var product = await _productService.GetByIdAsync(id);
        if (product == null)
        {
            return NotFound();
        }

        return View(product);
    }

    // GET: Products/Create
    [Authorize(Roles = "admin")] // Only admins can create
    public IActionResult Create()
    {
        return View();
    }

    // POST: Products/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    [Authorize(Roles = "admin")]
    public async Task<IActionResult> Create(ProductDto productDto)
    {
        if (!ModelState.IsValid)
        {
            return View(productDto);
        }

        try
        {
            var product = _mapper.Map<Product>(productDto);
            await _productService.AddAsync(product);
            return RedirectToAction(nameof(Index));
        }
        catch (Exception ex)
        {
            ModelState.AddModelError("", $"Error: {ex.Message}");
            return View(productDto);
        }
    }

    // GET: Products/Edit/5
    [Authorize(Roles = "admin")]
    public async Task<IActionResult> Edit(int id)
    {
        if (id <= 0)
        {
            return BadRequest("Invalid product ID.");
        }

        var product = await _productService.GetByIdAsync(id);
        if (product == null)
        {
            return NotFound();
        }

        var productDto = _mapper.Map<ProductDto>(product);
        return View(productDto);
    }

    // POST: Products/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    [Authorize(Roles = "admin")]
    public async Task<IActionResult> Edit(int id, ProductDto productDto)
    {
        if (id != productDto.Id)
        {
            return BadRequest("Product ID mismatch.");
        }

        if (!ModelState.IsValid)
        {
            return View(productDto);
        }

        try
        {
            var product = _mapper.Map<Product>(productDto);
            await _productService.UpdateAsync(product);
            return RedirectToAction(nameof(Index));
        }
        catch (Exception ex)
        {
            ModelState.AddModelError("", $"Error: {ex.Message}");
            return View(productDto);
        }
    }

    // GET: Products/Delete/5
    [Authorize(Roles = "admin")]
    public async Task<IActionResult> Delete(int id)
    {
        if (id <= 0)
        {
            return BadRequest("Invalid product ID.");
        }

        var product = await _productService.GetByIdAsync(id);
        if (product == null)
        {
            return NotFound();
        }

        return View(product);
    }

    // POST: Products/Delete/5
    [HttpPost, ActionName("Delete")]
    [ValidateAntiForgeryToken]
    [Authorize(Roles = "admin")]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        if (id <= 0)
        {
            return BadRequest("Invalid product ID.");
        }

        try
        {
            await _productService.DeleteAsync(id);
            return RedirectToAction(nameof(Index));
        }
        catch (Exception ex)
        {
            ModelState.AddModelError("", $"Error: {ex.Message}");
            return View();
        }
    }
}
