// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Infrastructure.Data;

#nullable disable

namespace eCommerce.Infrastructure.Migrations
{
    [DbContext(typeof(eCommerceDbContext))]
    [Migration("20250114130233_Banner_description")]
    partial class Banner_description
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AddressType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Street")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Address", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogin", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValue")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("OldValue")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("RecordId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogId");

                    b.HasIndex("ChangedBy");

                    b.ToTable("AuditLog", "Audit");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<string>("BannerDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BannerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("BannerId")
                        .HasName("PK__Banners__32E86AD10DC4B517");

                    b.ToTable("Banners", "Marketing");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandImage")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Brands", "Marketing");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CartId")
                        .HasName("PK_UserCart_1");

                    b.ToTable("Cart", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("ProductIvariantd")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductIVariantd");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductIvariantd");

                    b.ToTable("CartItem", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeatureCategory", b =>
                {
                    b.Property<int>("FeatureCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureCategoryId"));

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FeatureCategoryId");

                    b.ToTable("FeatureCategory", (string)null);
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeatureOption", b =>
                {
                    b.Property<int>("FeatureOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureOptionId"));

                    b.Property<int>("ProductFeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FeatureOptionId");

                    b.HasIndex("ProductFeatureId");

                    b.HasIndex(new[] { "Value" }, "UQ_Value")
                        .IsUnique();

                    b.ToTable("FeatureOption", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Feedback", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeedbackImage", b =>
                {
                    b.Property<int>("FeedbackImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackImageId");

                    b.ToTable("FeedbackImage", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<byte[]>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varbinary(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UpdatedAt")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("OrderId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Orders_customer_id");

                    b.ToTable("Orders", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("OrderItemId")
                        .HasName("PK_OrderItems_1");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex(new[] { "TotalPrice" }, "IX_OrderItems_order_id");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItems_product_id");

                    b.ToTable("OrderItems", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", "Transaction");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ProductId")
                        .HasName("PK__products__47027DF541B41370");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Products_category_id");

                    b.HasIndex(new[] { "SubCategoryId" }, "IX_Products_main_category_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Products_user_id");

                    b.ToTable("Products", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductAttribute", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AttributeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductId", "AttributeName");

                    b.ToTable("ProductAttributes", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("CategoryImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductCategoryId")
                        .HasName("PK_MainCategory");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProductCategory", "Marketing");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductCategoryFeature", b =>
                {
                    b.Property<int>("ProductCategoryFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryFeatureId"));

                    b.Property<int>("FeatureCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryFeatureId")
                        .HasName("PK_VariationCategory");

                    b.HasIndex("FeatureCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductFeaturesId");

                    b.ToTable("ProductCategoryFeature", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductConfiguration", b =>
                {
                    b.Property<int>("ProductConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductConfigurationId"));

                    b.Property<int>("FeatureOptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductVarientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductConfigurationId");

                    b.HasIndex("FeatureOptionId");

                    b.HasIndex("ProductVarientId");

                    b.ToTable("ProductConfiguration", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductDiscount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FlatDiscount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("DiscountId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductDiscount", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductFeature", b =>
                {
                    b.Property<int>("ProductFeaturesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductFeaturesId"));

                    b.Property<int?>("FeatureCategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsManadatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductFeaturesId");

                    b.HasIndex("FeatureCategoryId");

                    b.ToTable("ProductFeatures", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProductImageId")
                        .HasName("PK_ProductImages");

                    b.HasIndex(new[] { "ProductVariantId" }, "IX_ProductImages_productId");

                    b.ToTable("ProductImage", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<Guid>("ProductIvarientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductIVarientId");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SKU");

                    b.Property<string>("VarientName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("ProductIvarientId")
                        .HasName("PK_ProductItems");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant", "Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<DateTime?>("ExpectedDelivery")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrder", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("PurchaseOrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.QA", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("AnsweredBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QueryId")
                        .HasName("PK_ask_qustion");

                    b.HasIndex("AnsweredBy");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Q&A_c_id");

                    b.HasIndex(new[] { "ProductVariantId" }, "IX_Q&A_p_id");

                    b.ToTable("Q&A", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Refund", b =>
                {
                    b.Property<long>("RefundId")
                        .HasColumnType("bigint");

                    b.Property<string>("Amount")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("InitiatedAt")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefundMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<int?>("ReturnRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("RefundId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReturnRequestId");

                    b.ToTable("Refund", "Transaction");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ReturnRequest", b =>
                {
                    b.Property<int>("ReturnRequestId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReturnRequestId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("ReturnRequest", "Transaction");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("AddressId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SupplierProduct", b =>
                {
                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(10, 2)");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProduct", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SupplierTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierTransaction", "Transaction");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WarehouseId")
                        .HasName("PK__stores__A2F2A30C9859C215");

                    b.HasIndex("UserId");

                    b.ToTable("Warehouse", "Inventory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WishlistId")
                        .HasName("PK_wishlist_1");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Wishlist_c_id");

                    b.HasIndex(new[] { "ProductVariantId" }, "IX_Wishlist_p_id");

                    b.ToTable("Wishlist", "User");
                });

            modelBuilder.Entity("eCommerce.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("eCommerce.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("eCommerce.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Address", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Address_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "ChangedByNavigation")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ChangedBy")
                        .IsRequired()
                        .HasConstraintName("FK_AuditLog_AspNetUsers");

                    b.Navigation("ChangedByNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Brand", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("Brands")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Brands_AspNetUsers");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Cart", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "CartNavigation")
                        .WithOne("Cart")
                        .HasForeignKey("eCommerce.Domain.Entities.Cart", "CartId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCart_AspNetUsers");

                    b.Navigation("CartNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Cart");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductIvariantdNavigation")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductIvariantd")
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Products");

                    b.Navigation("Cart");

                    b.Navigation("ProductIvariantdNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeatureOption", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductFeature", "ProductFeature")
                        .WithMany("FeatureOptions")
                        .HasForeignKey("ProductFeatureId")
                        .IsRequired()
                        .HasConstraintName("FK_FeatureOption_ProductFeatures");

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_AspNetUsers");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Products");

                    b.Navigation("Customer");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeedbackImage", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Feedback", "FeedbackImageNavigation")
                        .WithOne("FeedbackImage")
                        .HasForeignKey("eCommerce.Domain.Entities.FeedbackImage", "FeedbackImageId")
                        .IsRequired()
                        .HasConstraintName("FK_FeedbackImage_Feedback");

                    b.Navigation("FeedbackImageNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_Inventory_ProductVarient");

                    b.HasOne("eCommerce.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_Inventory_Warehouse");

                    b.Navigation("ProductVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Notification", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Address", "BillingAddressNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("BillingAddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Orders");

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_AspNetUsers");

                    b.Navigation("BillingAddressNavigation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_ProductVarient");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Payment", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Category_Main");

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "CreatedByNavigation")
                        .WithMany("ProductCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Products_AspNetUsers");

                    b.HasOne("eCommerce.Domain.Entities.Brand", "ProductNavigation")
                        .WithOne("Product")
                        .HasForeignKey("eCommerce.Domain.Entities.Product", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Brands");

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "UpdatedByNavigation")
                        .WithMany("ProductUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_Products_AspNetUsers1");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ProductNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductCategoryFeature", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.FeatureCategory", "FeatureCategory")
                        .WithMany("ProductCategoryFeatures")
                        .HasForeignKey("FeatureCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategoryFeature_FeatureCategory");

                    b.HasOne("eCommerce.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryFeatures")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategoryFeature_ProductCategory");

                    b.HasOne("eCommerce.Domain.Entities.ProductFeature", "ProductFeatures")
                        .WithMany("ProductCategoryFeatures")
                        .HasForeignKey("ProductFeaturesId")
                        .HasConstraintName("FK_ProductCategoryFeature_ProductFeatures");

                    b.Navigation("FeatureCategory");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductConfiguration", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.FeatureOption", "FeatureOption")
                        .WithMany("ProductConfigurations")
                        .HasForeignKey("FeatureOptionId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductConfiguration_FeatureOption");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVarient")
                        .WithMany("ProductConfigurations")
                        .HasForeignKey("ProductVarientId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductConfiguration_ProductVarient");

                    b.Navigation("FeatureOption");

                    b.Navigation("ProductVarient");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductDiscount", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductDiscount_ProductVarient");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductFeature", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.FeatureCategory", "FeatureCategory")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("FeatureCategoryId")
                        .HasConstraintName("FK_ProductFeatures_FeatureCategory");

                    b.Navigation("FeatureCategory");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImage_Products");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductItems_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_PurchaseOrder_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_PurchaseOrderItem_PurchaseOrder");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.QA", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "AnsweredByNavigation")
                        .WithMany("QAAnsweredByNavigations")
                        .HasForeignKey("AnsweredBy")
                        .HasConstraintName("FK_Q&A_AspNetUsers_Vendor");

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "Customer")
                        .WithMany("QACustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Q&A_AspNetUsers_Customer");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("QAs")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_Q&A_Products");

                    b.Navigation("AnsweredByNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Refund", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Order", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Refund_Orders");

                    b.HasOne("eCommerce.Domain.Entities.ReturnRequest", "ReturnRequest")
                        .WithMany("Refunds")
                        .HasForeignKey("ReturnRequestId")
                        .HasConstraintName("FK_Refund_ReturnRequest");

                    b.Navigation("Order");

                    b.Navigation("ReturnRequest");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ReturnRequest", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Order", "Order")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnRequest_Orders");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnRequest_ProductVarient");

                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnRequest_AspNetUsers");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SupplierProduct", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierProduct_ProductVarient");

                    b.HasOne("eCommerce.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_SupplierProduct_Supplier");

                    b.Navigation("ProductVariant");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.SupplierTransaction", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_SupplierTransaction_Supplier");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "User")
                        .WithMany("Warehouses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Warehouse_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("eCommerce.Domain.Entities.AspNetUser", "Customer")
                        .WithMany("Wishlists")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_AspNetUsers");

                    b.HasOne("eCommerce.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("Wishlists")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Products");

                    b.Navigation("Customer");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.AspNetUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("AuditLogs");

                    b.Navigation("Brands");

                    b.Navigation("Cart");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("ProductCreatedByNavigations");

                    b.Navigation("ProductUpdatedByNavigations");

                    b.Navigation("QAAnsweredByNavigations");

                    b.Navigation("QACustomers");

                    b.Navigation("ReturnRequests");

                    b.Navigation("Warehouses");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeatureCategory", b =>
                {
                    b.Navigation("ProductCategoryFeatures");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.FeatureOption", b =>
                {
                    b.Navigation("ProductConfigurations");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackImage");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");

                    b.Navigation("ReturnRequests");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("ProductCategoryFeatures");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductFeature", b =>
                {
                    b.Navigation("FeatureOptions");

                    b.Navigation("ProductCategoryFeatures");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Feedbacks");

                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductConfigurations");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductImages");

                    b.Navigation("QAs");

                    b.Navigation("ReturnRequests");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.ReturnRequest", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("eCommerce.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
