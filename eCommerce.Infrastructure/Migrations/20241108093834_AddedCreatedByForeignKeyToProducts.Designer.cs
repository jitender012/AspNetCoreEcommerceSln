// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce.Infrastructure.Models;

#nullable disable

namespace eCommerce.Infrastructure.Migrations
{
    [DbContext(typeof(eCommerceDbContext))]
    [Migration("20241108093834_AddedCreatedByForeignKeyToProducts")]
    partial class AddedCreatedByForeignKeyToProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<string>("BannerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("BannerId")
                        .HasName("PK__Banners__32E86AD10DC4B517");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandImg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("brand_img");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("brand_name");

                    b.HasKey("BrandId")
                        .HasName("PK__brands__5E5A8E27E5FBD4A8");

                    b.ToTable("Brands", "production");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryImg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("category_img");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId")
                        .HasName("PK__categori__D54EE9B482F1C182");

                    b.HasIndex(new[] { "MainCategoryId" }, "IX_Categories_MainCategoryId");

                    b.ToTable("Categories", "production");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("feedback_text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("image_url");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("ratingValue");

                    b.HasKey("FeedbackId")
                        .HasName("PK_feedback");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Feedback_customer_id");

                    b.HasIndex(new[] { "ProductId" }, "IX_Feedback_product_id");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainCategoryId"));

                    b.Property<string>("MainCategoryImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MainCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("MainCategoryId");

                    b.ToTable("MainCategory", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("order_status");

                    b.Property<DateOnly>("RequiredDate")
                        .HasColumnType("date")
                        .HasColumnName("required_date");

                    b.Property<DateOnly?>("ShippedDate")
                        .HasColumnType("date")
                        .HasColumnName("shipped_date");

                    b.HasKey("OrderId")
                        .HasName("PK__orders__46596229D0CDB00A");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Orders_customer_id");

                    b.ToTable("Orders", "sales");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("discount");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("list_price");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SellerId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("seller_id");

                    b.HasKey("OrderItemId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItems_order_id");

                    b.HasIndex(new[] { "ProductId" }, "IX_OrderItems_product_id");

                    b.ToTable("OrderItems", "sales");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("list_price");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("main_category_id");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_date");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("selling_price");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("url");

                    b.HasKey("ProductId")
                        .HasName("PK__products__47027DF541B41370");

                    b.HasIndex(new[] { "BrandId" }, "IX_Products_brand_id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Products_category_id");

                    b.HasIndex(new[] { "MainCategoryId" }, "IX_Products_main_category_id");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_Products_user_id");

                    b.ToTable("Products", "production");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.ProductAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductId", "AttributeName");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.ProductImage", b =>
                {
                    b.Property<int>("ImgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImgId"));

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("ImgId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductImages_productId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.QA", b =>
                {
                    b.Property<string>("QusId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("qus_id");

                    b.Property<string>("AnsText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ans_text");

                    b.Property<string>("CId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("c_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("PId")
                        .HasColumnType("int")
                        .HasColumnName("p_id");

                    b.Property<string>("QusText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("qus_text");

                    b.HasKey("QusId")
                        .HasName("PK_ask_qustion");

                    b.HasIndex(new[] { "CId" }, "IX_Q&A_c_id");

                    b.HasIndex(new[] { "PId" }, "IX_Q&A_p_id");

                    b.ToTable("Q&A", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.SmartPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Colour")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("colour");

                    b.Property<string>("Dimension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dimension");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model_number");

                    b.Property<string>("NetworkType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("network_type");

                    b.Property<string>("PrimaryCamera")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("primary_camera");

                    b.Property<string>("Processor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("processor");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Ram")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ram");

                    b.Property<string>("ScreenSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("screen_size");

                    b.Property<string>("SecondaryCamera")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("secondary_camera");

                    b.Property<string>("Storage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("storage");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("SmartPhone", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("StoreId", "ProductId")
                        .HasName("PK__stocks__E68284D356E69F20");

                    b.HasIndex(new[] { "ProductId" }, "IX_Stocks_product_id");

                    b.ToTable("Stocks", "production");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("state");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("store_name");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("zip_code");

                    b.HasKey("StoreId")
                        .HasName("PK__stores__A2F2A30C9859C215");

                    b.HasIndex(new[] { "UserId" }, "IX_Stores_user_id");

                    b.ToTable("Stores", "sales");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.UserCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("PK_userCart");

                    b.HasIndex(new[] { "ProductId" }, "IX_UserCart_product_id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserCart_user_id");

                    b.ToTable("UserCart", (string)null);
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("c_id");

                    b.Property<int>("PId")
                        .HasColumnType("int")
                        .HasColumnName("p_id");

                    b.HasKey("Id")
                        .HasName("PK_wishlist_1");

                    b.HasIndex(new[] { "CId" }, "IX_Wishlist_c_id");

                    b.HasIndex(new[] { "PId" }, "IX_Wishlist_p_id");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserClaim", b =>
                {
                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserLogin", b =>
                {
                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Core.Domain.IdentityEntities.ApplicationUserToken", b =>
                {
                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Category", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Categories_MainCategory");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Feedback", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_feedback_products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.OrderItem", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItems_Orders");

                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_ite__produ__4E88ABD4");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Product", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__products__brand___3C69FB99");

                    b.HasOne("eCommerce.Infrastructure.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__products__catego__3B75D760");

                    b.HasOne("eCommerce.Core.Domain.IdentityEntities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCommerce.Infrastructure.Models.MainCategory", "MainCategory")
                        .WithMany("Products")
                        .HasForeignKey("MainCategoryId")
                        .HasConstraintName("FK_Products_MainCategory");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.ProductAttribute", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductAttributes_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.ProductImage", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImages_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.QA", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "PIdNavigation")
                        .WithMany("QAs")
                        .HasForeignKey("PId")
                        .IsRequired()
                        .HasConstraintName("FK_query_products");

                    b.Navigation("PIdNavigation");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Stock", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__stocks__product___52593CB8");

                    b.HasOne("eCommerce.Infrastructure.Models.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__stocks__store_id__5165187F");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.UserCart", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "Product")
                        .WithMany("UserCarts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Table_1_products:pid");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Wishlist", b =>
                {
                    b.HasOne("eCommerce.Infrastructure.Models.Product", "PIdNavigation")
                        .WithMany("Wishlists")
                        .HasForeignKey("PId")
                        .IsRequired()
                        .HasConstraintName("FK_wishlist_products");

                    b.Navigation("PIdNavigation");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.MainCategory", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");

                    b.Navigation("QAs");

                    b.Navigation("Stocks");

                    b.Navigation("UserCarts");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("eCommerce.Infrastructure.Models.Store", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
