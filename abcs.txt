Error handling in repository layer:
Handle errors specific to the data access, like-
-Entity not found
-Database connection issue
-Constraint violation

Error handling in Service layer:
Service handles business logic, errors might relate to-
-Invalid input data
-Busines rule violation
-Errors from repository


--When to use Async methods?
When should create a method async when it does something that can take a while—like I/O operations (database calls, network requests, file access) or other long-running tasks. This way, your app doesn't block the thread while waiting for the operation to finish.
When to Use Async:
I/O-bound operations: Any method that makes a database call, calls a web service, or reads/writes files should be async.
Chaining async calls: If you're calling another async method (like in your repository), your method should also be async.
UI responsiveness: In UI apps, async methods keep the interface smooth and responsive.
When Not to Use Async:
Simple, CPU-bound operations: If your method does quick calculations or simple work that doesn't involve waiting, async might not be needed.
In short, if there's a chance your method will wait for an external operation, go async!


--- Common method names in Service Layer:
→ GetAllAsync 
→ GetByIdAsync 
→ AddAsync 
→ UpdateAsync 
→ DeleteAsync 

--- Common method names in Repository Layer:
→ FetchAllAsync
→ FindByIdAsync
→ InsertAsync
→ ModifyAsync
→ RemoveByIdAsync

--- Where to map entities and models ---
1.  Fetching Data (Domain Entity → DTO → ViewModel)
→ Repository Layer: Returns Domain Entities (Product, Order, etc.).
→ Service Layer: Maps Domain Entity → DTO.
→ Controller (MVC) / API Layer: Maps DTO → ViewModel before sending to the UI.

2. Inserting/Updating Data (ViewModel → DTO → Domain Entity)
→ Controller (MVC) / API Layer: Maps ViewModel → DTO.
→ Service Layer: Maps DTO → Domain Entity before sending it to the repository.
→ Repository Layer: Saves Domain Entity in the database.


Where should we use try-catch?
In the repository layer (to catch database-related exceptions).
In the service layer (to catch business logic errors and rethrow meaningful exceptions).
Global exception handling middleware (for logging and user-friendly error responses).


Criteria							Throwing in Repository	Logging in Repository
Unexpected Failures					✅ Yes					❌ No
Expected Scenarios					❌ No					✅ Yes
Service Should Decide Handling		✅ Yes					❌ No
Avoid Cluttering Logs				✅ Yes					❌ No
Debugging Queries/Warnings			❌ No					✅ Yes

--Conclusion
❌ Don't catch exceptions in the repository unless handling expected cases.
✅ Let the Service Layer log and handle errors properly.
✅ Throw original exceptions instead of wrapping them in Exception("Something went wrong.").

Throwing Exception("Product not found.") in Repository
❌ Bad Practice: The repository should not decide error handling.
✅ Better: Return null, and let the service layer handle it.